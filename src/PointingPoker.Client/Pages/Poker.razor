@page "/poker"
@using Microsoft.AspNetCore.SignalR.Client
@using PointingPoker.Models.Enums
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Poker Table</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Table:
        <input @bind="tableInput" />
    </label>
</div>

<button @onclick="JoinTable" disabled="@(!IsUserAndTableEntered)">Join</button>

@if (isJoined)
{
    <hr>

    <h3>Players at the Table</h3>
    <ul>
        @foreach (var player in players)
        {
            <li>@player</li>
        }
    </ul>
}

@code {
    private HubConnection? hubConnection;
    private List<string> players = new List<string>();
    private string? userInput;
    private string? tableInput;
    private string? currentTable;
    private bool isJoined = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/pokerhub"))
            .Build();

        hubConnection.On<string>("ReceivePlayer", (user) =>
        {
            if (!players.Contains(user))
            {
                players.Add(user);
                InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinTable()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(tableInput) && !string.IsNullOrEmpty(userInput))
        {
            currentTable = tableInput;
            await hubConnection.SendAsync("JoinTable", currentTable, userInput);
            players.Clear();
            isJoined = true;
        }
    }

    private bool IsUserAndTableEntered =>
        !string.IsNullOrEmpty(userInput) && !string.IsNullOrEmpty(tableInput);

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
