@page "/"

@using Microsoft.AspNetCore.SignalR.Client
@using PointingPoker.Models
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<h1>Welcome to Pointing Poker</h1>

<div class="form-group">
    <label>
        Username:
        <input @bind="username" />
    </label>
</div>
<div class="form-group">
    <label>
        Table:
        <input @bind="table" />
    </label>
</div>

<button @onclick="JoinTable" disabled="@(!IsConnected || !IsUserAndTableEntered || IsInTable)">Join Table</button>
<button @onclick="LeaveTable" disabled="@(!IsConnected || !IsInTable)">Leave Table</button>
<button @onclick="ToggleShowCards">Show Cards</button>

@if (IsInTable)
{
    <h3>Users in Table @currentTable</h3>
    <ul>
        @foreach (var user in usersInTable)
        {
            <li>
                @user.Username
                @if (user.Username == username || showCards)
                {
                    if (!string.IsNullOrEmpty(user.Card))
                    {
                        <span>- @user.Card</span>
                    }
                }
            </li>
        }
    </ul>
}

@code {
    private HubConnection? hubConnection;
    private string? username;
    private string? table;
    private string? currentTable;
    private List<User> usersInTable = new List<User>();
    private bool showCards = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/pokerhub"))
            .Build();

        hubConnection.On<string>("UserJoined", async (user) =>
        {
            usersInTable.Add(new User { Username = user });
            await InvokeAsync(StateHasChanged);
        });

        hubConnection.On<string>("UserLeft", async (user) =>
        {
            var userInTable = usersInTable.FirstOrDefault(u => u.Username == user);
            if (userInTable != null)
            {
                usersInTable.Remove(userInTable);
                await InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<string, string>("CardPlayed", async (user, card) =>
        {
            var userInTable = usersInTable.FirstOrDefault(u => u.Username == user);
            if (userInTable != null)
            {
                userInTable.Card = card;
                await InvokeAsync(StateHasChanged);
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinTable()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(table))
        {
            if (!string.IsNullOrEmpty(currentTable))
            {
                await hubConnection.SendAsync("LeaveTable", currentTable);
            }

            await hubConnection.SendAsync("JoinTable", table, username);
            currentTable = table;

            var users = await hubConnection.InvokeAsync<string[]>("GetUsersInTable", table);
            usersInTable = users.Select(u => new User { Username = u }).ToList();
        }
    }

    private async Task LeaveTable()
    {
        if (hubConnection is not null && !string.IsNullOrEmpty(currentTable))
        {
            await hubConnection.SendAsync("LeaveTable", currentTable);
            currentTable = null;
            usersInTable.Clear();
        }
    }

    private void ToggleShowCards()
    {
        showCards = !showCards;
    }

    private bool IsUserAndTableEntered =>
        !string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(table);

    private bool IsInTable =>
        !string.IsNullOrEmpty(currentTable);

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
